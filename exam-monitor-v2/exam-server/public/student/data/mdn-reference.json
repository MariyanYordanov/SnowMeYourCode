{
  "javascript": {
    "Array": {
      "map": {
        "syntax": "array.map(callback(element, index, array), thisArg)",
        "description": "Създава нов масив с резултатите от извикването на функция за всеки елемент.",
        "examples": [
          "const numbers = [1, 2, 3];\nconst doubled = numbers.map(x => x * 2);\nconsole.log(doubled); // [2, 4, 6]",
          "const users = [{name: 'Ivan'}, {name: 'Maria'}];\nconst names = users.map(user => user.name);\nconsole.log(names); // ['Ivan', 'Maria']"
        ],
        "returns": "Array - нов масив със същия брой елементи",
        "category": "iteration"
      },
      "filter": {
        "syntax": "array.filter(callback(element, index, array), thisArg)",
        "description": "Създава нов масив само с елементите, които преминават теста.",
        "examples": [
          "const numbers = [1, 2, 3, 4, 5];\nconst evens = numbers.filter(x => x % 2 === 0);\nconsole.log(evens); // [2, 4]",
          "const users = [{age: 25}, {age: 17}, {age: 30}];\nconst adults = users.filter(user => user.age >= 18);\nconsole.log(adults); // [{age: 25}, {age: 30}]"
        ],
        "returns": "Array - нов масив с филтрираните елементи",
        "category": "iteration"
      },
      "reduce": {
        "syntax": "array.reduce(callback(accumulator, element, index, array), initialValue)",
        "description": "Прилага функция към всеки елемент, за да ги сведе до една стойност.",
        "examples": [
          "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, x) => acc + x, 0);\nconsole.log(sum); // 10",
          "const items = [{price: 10}, {price: 20}];\nconst total = items.reduce((sum, item) => sum + item.price, 0);\nconsole.log(total); // 30"
        ],
        "returns": "any - резултата от редукцията",
        "category": "iteration"
      },
      "forEach": {
        "syntax": "array.forEach(callback(element, index, array), thisArg)",
        "description": "Изпълнява функция за всеки елемент от масива.",
        "examples": [
          "const numbers = [1, 2, 3];\nnumbers.forEach(x => console.log(x));\n// 1\n// 2\n// 3",
          "const items = ['apple', 'banana'];\nitems.forEach((item, index) => {\n  console.log(`${index}: ${item}`);\n});\n// 0: apple\n// 1: banana"
        ],
        "returns": "undefined",
        "category": "iteration"
      },
      "find": {
        "syntax": "array.find(callback(element, index, array), thisArg)",
        "description": "Връща първия елемент, който отговаря на условието.",
        "examples": [
          "const numbers = [1, 2, 3, 4];\nconst found = numbers.find(x => x > 2);\nconsole.log(found); // 3",
          "const users = [{id: 1, name: 'Ivan'}, {id: 2, name: 'Maria'}];\nconst user = users.find(u => u.id === 2);\nconsole.log(user); // {id: 2, name: 'Maria'}"
        ],
        "returns": "any | undefined - намерения елемент или undefined",
        "category": "search"
      },
      "push": {
        "syntax": "array.push(element1, element2, ...)",
        "description": "Добавя един или повече елементи в края на масива.",
        "examples": [
          "const fruits = ['apple'];\nfruits.push('banana');\nconsole.log(fruits); // ['apple', 'banana']",
          "const numbers = [1, 2];\nnumbers.push(3, 4, 5);\nconsole.log(numbers); // [1, 2, 3, 4, 5]"
        ],
        "returns": "number - новата дължина на масива",
        "category": "modification"
      },
      "pop": {
        "syntax": "array.pop()",
        "description": "Премахва и връща последния елемент от масива.",
        "examples": [
          "const fruits = ['apple', 'banana'];\nconst last = fruits.pop();\nconsole.log(last); // 'banana'\nconsole.log(fruits); // ['apple']"
        ],
        "returns": "any | undefined - премахнатия елемент или undefined",
        "category": "modification"
      },
      "slice": {
        "syntax": "array.slice(start, end)",
        "description": "Връща копие на част от масива без да го променя.",
        "examples": [
          "const numbers = [1, 2, 3, 4, 5];\nconst slice = numbers.slice(1, 4);\nconsole.log(slice); // [2, 3, 4]\nconsole.log(numbers); // [1, 2, 3, 4, 5]"
        ],
        "returns": "Array - нов масив с избраните елементи",
        "category": "access"
      },
      "join": {
        "syntax": "array.join(separator)",
        "description": "Обединява всички елементи в един string.",
        "examples": [
          "const words = ['Hello', 'world'];\nconst sentence = words.join(' ');\nconsole.log(sentence); // 'Hello world'",
          "const numbers = [1, 2, 3];\nconst csv = numbers.join(',');\nconsole.log(csv); // '1,2,3'"
        ],
        "returns": "string - обединения текст",
        "category": "conversion"
      },
      "includes": {
        "syntax": "array.includes(searchElement, fromIndex)",
        "description": "Проверява дали масивът съдържа определен елемент.",
        "examples": [
          "const fruits = ['apple', 'banana', 'orange'];\nconsole.log(fruits.includes('banana')); // true\nconsole.log(fruits.includes('grape')); // false"
        ],
        "returns": "boolean - true ако елементът е намерен",
        "category": "search"
      }
    },
    "String": {
      "substring": {
        "syntax": "string.substring(start, end)",
        "description": "Връща част от текста между две позиции.",
        "examples": [
          "const text = 'Hello world';\nconst sub = text.substring(0, 5);\nconsole.log(sub); // 'Hello'",
          "const email = 'user@example.com';\nconst domain = email.substring(email.indexOf('@') + 1);\nconsole.log(domain); // 'example.com'"
        ],
        "returns": "string - извлечената част",
        "category": "extraction"
      },
      "split": {
        "syntax": "string.split(separator, limit)",
        "description": "Разделя текста в масив използвайки разделител.",
        "examples": [
          "const csv = 'apple,banana,orange';\nconst fruits = csv.split(',');\nconsole.log(fruits); // ['apple', 'banana', 'orange']",
          "const sentence = 'Hello world';\nconst words = sentence.split(' ');\nconsole.log(words); // ['Hello', 'world']"
        ],
        "returns": "Array - масив с разделените части",
        "category": "conversion"
      },
      "indexOf": {
        "syntax": "string.indexOf(searchValue, fromIndex)",
        "description": "Намира позицията на първото съвпадение.",
        "examples": [
          "const text = 'Hello world';\nconst pos = text.indexOf('world');\nconsole.log(pos); // 6",
          "const email = 'user@example.com';\nconst atPos = email.indexOf('@');\nconsole.log(atPos); // 4"
        ],
        "returns": "number - позицията или -1 ако не е намерен",
        "category": "search"
      },
      "replace": {
        "syntax": "string.replace(searchValue, replaceValue)",
        "description": "Заменя първото съвпадение с нова стойност.",
        "examples": [
          "const text = 'Hello world';\nconst newText = text.replace('world', 'Bulgaria');\nconsole.log(newText); // 'Hello Bulgaria'",
          "const html = '<p>Text</p>';\nconst cleaned = html.replace(/<[^>]*>/g, '');\nconsole.log(cleaned); // 'Text'"
        ],
        "returns": "string - новия текст със заменените стойности",
        "category": "modification"
      },
      "toUpperCase": {
        "syntax": "string.toUpperCase()",
        "description": "Преобразува всички букви в главни.",
        "examples": [
          "const text = 'hello world';\nconst upper = text.toUpperCase();\nconsole.log(upper); // 'HELLO WORLD'"
        ],
        "returns": "string - текста с главни букви",
        "category": "transformation"
      },
      "toLowerCase": {
        "syntax": "string.toLowerCase()",
        "description": "Преобразува всички букви в малки.",
        "examples": [
          "const text = 'HELLO WORLD';\nconst lower = text.toLowerCase();\nconsole.log(lower); // 'hello world'"
        ],
        "returns": "string - текста с малки букви",
        "category": "transformation"
      },
      "trim": {
        "syntax": "string.trim()",
        "description": "Премахва интервалите в началото и края.",
        "examples": [
          "const text = '  hello world  ';\nconst trimmed = text.trim();\nconsole.log(trimmed); // 'hello world'\nconsole.log(trimmed.length); // 11"
        ],
        "returns": "string - текста без интервали в краищата",
        "category": "transformation"
      },
      "includes": {
        "syntax": "string.includes(searchString, position)",
        "description": "Проверява дали текстът съдържа определен подтекст.",
        "examples": [
          "const text = 'Hello world';\nconsole.log(text.includes('world')); // true\nconsole.log(text.includes('World')); // false (case sensitive)"
        ],
        "returns": "boolean - true ако подтекстът е намерен",
        "category": "search"
      }
    },
    "Object": {
      "keys": {
        "syntax": "Object.keys(obj)",
        "description": "Връща масив с всички имена на свойствата на обекта.",
        "examples": [
          "const person = {name: 'Ivan', age: 25, city: 'Sofia'};\nconst keys = Object.keys(person);\nconsole.log(keys); // ['name', 'age', 'city']",
          "const obj = {a: 1, b: 2};\nObject.keys(obj).forEach(key => {\n  console.log(`${key}: ${obj[key]}`);\n});\n// a: 1\n// b: 2"
        ],
        "returns": "Array - масив с имената на свойствата",
        "category": "inspection"
      },
      "values": {
        "syntax": "Object.values(obj)",
        "description": "Връща масив с всички стойности на свойствата на обекта.",
        "examples": [
          "const person = {name: 'Ivan', age: 25, city: 'Sofia'};\nconst values = Object.values(person);\nconsole.log(values); // ['Ivan', 25, 'Sofia']"
        ],
        "returns": "Array - масив със стойностите на свойствата",
        "category": "inspection"
      },
      "entries": {
        "syntax": "Object.entries(obj)",
        "description": "Връща масив с двойки [ключ, стойност] за всяко свойство.",
        "examples": [
          "const person = {name: 'Ivan', age: 25};\nconst entries = Object.entries(person);\nconsole.log(entries); // [['name', 'Ivan'], ['age', 25]]",
          "Object.entries(person).forEach(([key, value]) => {\n  console.log(`${key}: ${value}`);\n});\n// name: Ivan\n// age: 25"
        ],
        "returns": "Array - масив с двойки [ключ, стойност]",
        "category": "inspection"
      },
      "assign": {
        "syntax": "Object.assign(target, source1, source2, ...)",
        "description": "Копира всички свойства от един или повече обекти в целевия обект.",
        "examples": [
          "const target = {a: 1};\nconst source = {b: 2, c: 3};\nconst result = Object.assign(target, source);\nconsole.log(result); // {a: 1, b: 2, c: 3}",
          "const defaults = {color: 'blue', size: 'medium'};\nconst options = {size: 'large'};\nconst config = Object.assign({}, defaults, options);\nconsole.log(config); // {color: 'blue', size: 'large'}"
        ],
        "returns": "Object - целевия обект с копираните свойства",
        "category": "manipulation"
      }
    },
    "Math": {
      "random": {
        "syntax": "Math.random()",
        "description": "Връща случайно число между 0 (включено) и 1 (изключено).",
        "examples": [
          "const randomNum = Math.random();\nconsole.log(randomNum); // 0.7234567890123456",
          "// Случайно число между 1 и 10\nconst randomInt = Math.floor(Math.random() * 10) + 1;\nconsole.log(randomInt); // между 1 и 10"
        ],
        "returns": "number - случайно число между 0 и 1",
        "category": "random"
      },
      "floor": {
        "syntax": "Math.floor(x)",
        "description": "Закръгля надолу до най-близкото цяло число.",
        "examples": [
          "console.log(Math.floor(4.7)); // 4\nconsole.log(Math.floor(4.2)); // 4\nconsole.log(Math.floor(-4.2)); // -5"
        ],
        "returns": "number - закръглено надолу цяло число",
        "category": "rounding"
      },
      "ceil": {
        "syntax": "Math.ceil(x)",
        "description": "Закръгля нагоре до най-близкото цяло число.",
        "examples": [
          "console.log(Math.ceil(4.2)); // 5\nconsole.log(Math.ceil(4.7)); // 5\nconsole.log(Math.ceil(-4.7)); // -4"
        ],
        "returns": "number - закръглено нагоре цяло число",
        "category": "rounding"
      },
      "round": {
        "syntax": "Math.round(x)",
        "description": "Закръгля до най-близкото цяло число.",
        "examples": [
          "console.log(Math.round(4.2)); // 4\nconsole.log(Math.round(4.7)); // 5\nconsole.log(Math.round(4.5)); // 5"
        ],
        "returns": "number - закръглено цяло число",
        "category": "rounding"
      },
      "max": {
        "syntax": "Math.max(value1, value2, ...)",
        "description": "Връща най-голямата от дадените стойности.",
        "examples": [
          "console.log(Math.max(1, 5, 3)); // 5\nconst numbers = [1, 5, 3, 9, 2];\nconsole.log(Math.max(...numbers)); // 9"
        ],
        "returns": "number - най-голямата стойност",
        "category": "comparison"
      },
      "min": {
        "syntax": "Math.min(value1, value2, ...)",
        "description": "Връща най-малката от дадените стойности.",
        "examples": [
          "console.log(Math.min(1, 5, 3)); // 1\nconst numbers = [1, 5, 3, 9, 2];\nconsole.log(Math.min(...numbers)); // 1"
        ],
        "returns": "number - най-малката стойност",
        "category": "comparison"
      }
    }
  },
  "dom": {
    "document": {
      "getElementById": {
        "syntax": "document.getElementById(id)",
        "description": "Намира елемент по неговия id атрибут.",
        "examples": [
          "// HTML: <div id=\"myDiv\">Content</div>\nconst element = document.getElementById('myDiv');\nconsole.log(element.textContent); // 'Content'"
        ],
        "returns": "Element | null - намерения елемент или null",
        "category": "selection"
      },
      "querySelector": {
        "syntax": "document.querySelector(selector)",
        "description": "Намира първия елемент, който отговаря на CSS селектора.",
        "examples": [
          "const firstParagraph = document.querySelector('p');\nconst elementById = document.querySelector('#myId');\nconst elementByClass = document.querySelector('.myClass');"
        ],
        "returns": "Element | null - първия намерен елемент или null",
        "category": "selection"
      },
      "querySelectorAll": {
        "syntax": "document.querySelectorAll(selector)",
        "description": "Намира всички елементи, които отговарят на CSS селектора.",
        "examples": [
          "const allParagraphs = document.querySelectorAll('p');\nconst allButtons = document.querySelectorAll('button');\nallButtons.forEach(button => {\n  button.addEventListener('click', handleClick);\n});"
        ],
        "returns": "NodeList - списък с всички намерени елементи",
        "category": "selection"
      },
      "createElement": {
        "syntax": "document.createElement(tagName)",
        "description": "Създава нов HTML елемент.",
        "examples": [
          "const newDiv = document.createElement('div');\nnewDiv.textContent = 'Hello World';\nnewDiv.className = 'my-class';\ndocument.body.appendChild(newDiv);"
        ],
        "returns": "Element - новосъздадения елемент",
        "category": "creation"
      }
    },
    "element": {
      "addEventListener": {
        "syntax": "element.addEventListener(type, listener, options)",
        "description": "Добавя event listener към елемента.",
        "examples": [
          "const button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n  console.log('Button clicked!');\n});",
          "const input = document.querySelector('input');\ninput.addEventListener('input', (event) => {\n  console.log('Input value:', event.target.value);\n});"
        ],
        "returns": "undefined",
        "category": "events"
      },
      "appendChild": {
        "syntax": "element.appendChild(child)",
        "description": "Добавя дъщерен елемент в края на списъка с деца.",
        "examples": [
          "const parent = document.getElementById('container');\nconst child = document.createElement('p');\nchild.textContent = 'New paragraph';\nparent.appendChild(child);"
        ],
        "returns": "Element - добавения дъщерен елемент",
        "category": "modification"
      },
      "removeChild": {
        "syntax": "element.removeChild(child)",
        "description": "Премахва дъщерен елемент.",
        "examples": [
          "const parent = document.getElementById('container');\nconst child = document.getElementById('unwanted');\nparent.removeChild(child);"
        ],
        "returns": "Element - премахнатия елемент",
        "category": "modification"
      },
      "setAttribute": {
        "syntax": "element.setAttribute(name, value)",
        "description": "Задава стойност на атрибут на елемента.",
        "examples": [
          "const img = document.querySelector('img');\nimg.setAttribute('src', 'image.jpg');\nimg.setAttribute('alt', 'Description');"
        ],
        "returns": "undefined",
        "category": "attributes"
      },
      "getAttribute": {
        "syntax": "element.getAttribute(name)",
        "description": "Получава стойността на атрибут на елемента.",
        "examples": [
          "const link = document.querySelector('a');\nconst href = link.getAttribute('href');\nconsole.log('Link URL:', href);"
        ],
        "returns": "string | null - стойността на атрибута или null",
        "category": "attributes"
      }
    }
  }
}